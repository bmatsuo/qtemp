QTEMP(1)              User Contributed Perl Documentation             QTEMP(1)



NAME
       qtemp − quick template generator

VERSION
       This documentation refers to qtemp version 00.01_00 Originally created
       on 02/06/10 23:44:17

USAGE
       qtemp [options] <template_name>

REQUIRED ARGUMENTS
       <template_name>
           Name of template to use (i.e. ’perl’ uses template ’perl.qtemp’).

OPTIONS
       −o <output_file> | −−output [=] <output_file>
           Name of file to print template to (default: ’−’).  Defines
           substitution $FILE mapping to <output_file> if not equal to ’−’.

       −n  Trim any trailing newlines from the end of the template.  This is
           useful for piping a template into a program like xclip (or pbcopy),
           inline in vim, ...

       −d <date−format> | −−date−format [=] <date−format>
           Specify the date format to use in the special $D date substitution.

       −t <templ_file> | −−template−file [=] <templ_file>
           Specify an extra template file to add to the library (not
           necessarily the template output).  This is not really recommended
           in most circumstances.

       −T <templ_dir> | −−template−dir [=] <templ_dir>
           Specify a directory in which to search for template files.

       −s <sub_file> | −−subs−file [=] <sub_file>
           Specify a file with custom substitutions to use.

       −S <sub_dir> | −−subs−dir [=] <sub_dir>
           Specify a directory in which to search for substitutions.

       −d <patt>=<replace> | −−define <patt>=<replace>
           Define a substitution to use in the template.

       −−version
       −−usage
       −−help
       −−man
           Print the usual program information

DESCRIPTION
       qtemp is a template managing program. It is currently used generally to
       quickly create new scripts (perl, python, ...) and tex files.  It can
       also be used in conjunction with vim to insert templates for new
       functions/subroutines into a file being editted.

       qtemp prints templates either to STDOUT or to a file.

       Templates can have substitution patterns in them, which allow custom
       information (e.g. filename, creation date, ...) to be inserted into the
       template at the time of generation.

       When templates are written to a file, the template can also specify
       commands to execute after writing. This could include running chmod on
       script files, or perhaps adding and making an initial commit in a
       version control system.

TEMPLATES
       Templates can be added to qtemp by placing them in any (possibly
       nested) subdirectory of a searched template directory.

       Templates can contain three sections, seperated by a line containing
       only ’!!\n’.  These sections are: =over =item Local substitution
       definitions.  =item Template content containing substitutions.  =item
       Shell script code to execute after writing to a file.  =back

       When all three sections are given, they must be given in the above
       order.  If two sections are given, CURRENTLY, the first is assumed to
       be a template, and the second a shell script.  If only one section is
       given, it is assumed to be a template.

SUBSTITUTIONS
       Pattern substitutions to be made in templates can be defined in .subs
       files and placed in a searched subs directory (~/.qtemp/subs).

       Substitutions are defined one‐per‐line in a .subs file.

       A substitution definition consists of string X, the substitution name,
       imediately followed by an equal sign ’=’.  The remaining characters on
       the line of a substitution (mod the newline character) are used as the
       substition string for the pattern ${X}, or $X if X is not a single word
       (contains space(s) or symbol(s)).

SPECIAL SUBSTITUTIONS
       There are a number of special substitutions that are defined by default
       when qtemp starts execution.

       $$  This patern expands to a single dollar sign ’$’. This is useful
           when you actually want a dollar sign in the template.

       $FILE
           When writing the template to a file with the −o option, this
           pattern expands to the name of the file being written to.

       $DATE
           This pattern will expand to the date in a short form.

           For example: 02/06/10 23:44:17

SHELL PIPE SUBSTITUTIONS
       qtemp allows templates to pipe shell commands in‐line using a pipe
       substitution.  A pipe substitution has the form ’$(<shell command>)’.
       The standard output stream of <shell command> will be used as the
       substitution string in this case.

EXAMPLES
       An example template for a perl program follows:

           #!$(which perl)
           # Filename: $FILE
           # Author: ${AUTHOR}
           # Created: $DATE

           our $$VERSION = '00.00_01';

           sub main {

               return 0;
           }

           exit(main());
           !!
           chmod +x $FILE

       An example substitution file might look like the following:

           NAME=Bryan Matsuo
           EMAIL=bryan.matsuo@gmail.com
           AUTHOR=${NAME} <${EMAIL}>

       Using these two files together produce an executable like this:

           #!/usr/bin/perl

           # Filename: new_perl_script.pl
           # Author: Bryan Matsuo <bryan.matsuo@gmail.com>
           # Created: 02/06/10 23:44:17

           our $VERSION = '00.00_01';

           sub main {

               return 0;
           }

           exit(main());

AUTHOR
       Bryan Matsuo <bryan.matsuo@gmail.com>

BUGS
COPYRIGHT & LICENSE
       Copyright (C) 2010 by Bryan Matsuo

       This library is free software; you can redistribute it and/or modify it
       under the same terms as Perl itself, either Perl version 5.10.0 or, at
       your option, any later version of Perl 5 you may have available.



perl v5.8.9                       2010‐11‐12                          QTEMP(1)
