NAME
       qtemp - quick template generator

VERSION
       This documentation refers to qtemp version 0.06 Originally created on
       02/06/10 23:44:17

USAGE
       qtemp [options] <template_name>

REQUIRED ARGUMENTS
       <template_name>
           Name of template to use (i.e. 'perl' uses template 'perl.qtemp').

OPTIONS
       -f <sub_file> | --file [=] <sub_file>
           Specify a file with custom substitutions to use.

       -o <output_file> | --output [=] <output_file>
           Name of file to print template to (default: '-').  Defines
           substitution $F mapping to <output_file> if not equal to '-'.

       -s <pattern>=<sub> | --add-substitution <pattern>=<sub>
           Define a substitution to use in the template.

       -d <date-format> | --date-format [=] <date-format>
           Specify the date format to use in the special $D date substitution.

       --version
       --usage
       --help
       --man
           Print the usual program information

DESCRIPTION
    qtemp is a template generating program. It is currently used mostly to
    quickly create new scripts (perl, python, ...). It can also be used in
    conjunction with vim to insert templates for new functions/subroutines
    comment blocks, common code segments, etc. into an open file.

    qtemp prints templates either to STDOUT or to a file.

    Templates can have substitution variables in them, which allow custom
    information (e.g. filename, creation date, etc.) to be inserted into
    the template at the time of generation.

    When templates are written to a file, the template can also specify
    commands to execute after writing. This could include running chmod on
    script files, or perhaps adding and making an initial commit in a
    version control system.

TEMPLATES
    Templates can be added by placing them in any (possibly nested)
    subdirectory of ~/.qtemp/templates.

    There can be multiple segments to a qtemp template. The segments are
    separated by a single line containing '!!'. 

    There is always a 'text section' containing the template text. If
    there is second second, following the text section, it is assumed to
    be a shell script that should be run after the template is written to a
    file.

    A third section can be added before the text section to define any
    substitutions local to the template. See the examples a couple
    sections below for more information.

SUBSTITUTIONS
    String substitutions to be made in templates can be defined in .subs
    files and placed in a searched subs directory.

    Substitutions are defined one-per-line in a .subs file.

    A substitution definition consists of a string (the 'pattern') 
    followed directly by an equal sign. The remaining characters on
    the line of a substitution definition (minus the newline character) are
    used as the substition string for the $<pattern> if the pattern is a word
    (alphanumeric and '_'), or ${<pattern>} if the pattern is more than
    one word or uses other symbols.

SPECIAL SUBSTITUTIONS
    There are a number of special substitutions that are defined by default
    when qtemp starts execution.

    $$ This patern expands to a single dollar sign '$'. This is useful
        when you actually want a dollar sign in the template.

    $FILE When writing the template to a file with the -o option, this
        pattern expands to the name of the file being written to.

    $DATE This pattern will expand to the date in a short form.
        For example: 02/06/10 23:44:17

EXAMPLES
    An example substitution file might look like the following:

        NAME=Bryan Matsuo
        EMAIL=bryan.matsuo@gmail.com
        AUTHOR=${NAME} <${EMAIL}>

    The substitution files should be saved with a '.subs' extension in the
    '~/.qtemp/subs/' directory

    Here is a simple example template for perl programs:

        PERL BIN=/usr/bin/perl
        !!
        #!${PERL BIN}
        # Filename: $FILE
        # Author: $AUTHOR
        # Created: $DATE

        # PUT GLOBAL VARIABLE DEFINITIONS HERE.

        sub main {
            # PUT MAIN PROGRAM LOGIC HERE.
        return 0;
        }

        # PUT SUPPORTING SUBROUTINES HERE.

        exit(main())
        !!
        chmod +x $FILE

    When run with the command

        qtemp perl -o new_prog.perl

    This makes qtemp create an executable script 'new_prog.perl' with the
    contents that look like this:

        #!/usr/bin/perl
        # Filename: new_prog.perl
        # Author: Bryan Matsuo <bryan.matsuo@gmail.com>
        # Created: 02/06/10 23:44:17

        # PUT GLOBAL VARIABLE DEFINITIONS HERE.

        sub main {
            # PUT MAIN PROGRAM LOGIC HERE.
            return 0;
        }

        # PUT SUPPORTING SUBROUTINES HERE.

        exit(main())

    That's pretty much all there is too it.

AUTHOR

    Bryan Matsuo <bryan.matsuo@gmail.com> (Primary author)

BUGS

COPYRIGHT & LISCENCE

Copyright (c) 2010 by Bryan Matsuo

This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself, either Perl version 5.10.0 or, at
your option, any later version of Perl 5 you may have available.
