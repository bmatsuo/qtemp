NAME
       qtemp - quick template generator

VERSION
       This documentation refers to qtemp version 0.06 Originally created on
       02/06/10 23:44:17

USAGE
       qtemp [options] <template_name>

REQUIRED ARGUMENTS
       <template_name>
           Name of template to use (i.e. 'perl' uses template 'perl.qtemp').

OPTIONS
       -f <sub_file> | --file [=] <sub_file>
           Specify a file with custom substitutions to use.

       -o <output_file> | --output [=] <output_file>
           Name of file to print template to (default: '-').  Defines
           substitution $F mapping to <output_file> if not equal to '-'.

       -s <pattern>=<sub> | --add-substitution <pattern>=<sub>
           Define a substitution to use in the template.

       -d <date-format> | --date-format [=] <date-format>
           Specify the date format to use in the special $D date substitution.

       --version
       --usage
       --help
       --man
           Print the usual program information

DESCRIPTION
       qtemp is a template managing program. It is currently used generally to
       quickly create new scripts (perl, python, ...). It can also be used in
       conjunction with vim to insert templates for new functions/subroutines
       into a file being editted.

       qtemp prints templates either to STDOUT or to a file.

       Templates can have substitution variables in them, which allow custom
       information (e.g. filename, creation date, etc.) to be inserted into
       the template at the time of generation.

       When templates are written to a file, the template can also specify
       commands to execute after writing. This could include running chmod on
       script files, or perhaps adding and making an initial commit in a
       version control system.

TEMPLATES
       Templates can be added by placing them in any (possibly nested)
       subdirectory of a searched template directory.

       Templates can contain macro substitutions. A macro substitution is
       denoted by a dollar sign ('$') in a template, followed by curly braces
       ('{','}') enclosing the macro name. A macro name must start with either
       an aphabetic character ('a-z' or 'A-Z') or underscore ('_').  The rest
       of the characters can be either alphanumeric or underscores.  The curly
       braces can be omitted from a macro substitution if the macro name only
       consists of one character (not a recommended practice). Macro
       substitutions are defined in substitution or '.subs' files.
       Environment variables can also be used as in macro substitutions if a
       macro with the same name was not previously defined.

       A single line with only two exclaimation marks denotes the end of the
       template. The remaining lines of the template file are treated as a
       shell script and executed when the template is written to a file.
       Pattern substitution can be performed in the script as well.

SUBSTITUTIONS
       String substitutions to be made in templates can be defined in .subs
       files and placed in a searched subs directory.

       Substitutions are defined one-per-line in a .subs file.

       A substitution definition consists of a single word X (the substitution
       name) followed directly by an equal sign. The remaining characters on
       the line of a substitution definition (minus the newline character) are
       used as the substition string for the pattern $X (or ${X} if X is more
       than one character).

SPECIAL SUBSTITUTIONS
       There are a number of special substitutions that are defined by default
       when qtemp starts execution.

        $$ This patern expands to a single dollar sign '$'. This is useful
           when you actually want a dollar sign in the template.

        $F When writing the template to a file with the -o option, this
           pattern expands to the name of the file being written to.

        $D This pattern will expand to the date in a short form.

           For example: 02/06/10 23:44:17

EXAMPLES
       An example template for a perl program follows:

           #!/usr/bin/perl
           # Filename: $F
           # Author: ${AUTHOR}
           # Created: $D

           sub main {

           }

           exit(main())
           !!
           chmod +x $F

       An example substitution file might look like the following:

           NAME=Bryan Matsuo
           EMAIL=bryan.matsuo@gmail.com
           AUTHOR=${NAME} <${EMAIL}>

AUTHOR
       Bryan Matsuo <bryan.matsuo@gmail.com>

BUGS
COPYRIGHT & LISCENCE
       Copyright (C) 2010 by Bryan Matsuo

       This library is free software; you can redistribute it and/or modify it
       under the same terms as Perl itself, either Perl version 5.10.0 or, at
       your option, any later version of Perl 5 you may have available.



perl v5.10.0                      2010-06-17                          QTEMP(1)
