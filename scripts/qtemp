#!/usr/bin/env perl

# Use perldoc or option --man to read documentation

our $VERSION = 00.01_03;

# TODO: add documentation to the .qtemp template format
#   Then add options to view documentation and search the template
#   library.

# Include some core modules.
use strict;
use warnings;
use File::Basename;
use English;
use Carp;
use File::Glob;
use POSIX qw(strftime); 
use Time::Local; 

# Include some CPAN modules;
use Getopt::Euclid qw{ :vars<opt_> };

use App::Qtemp::DirUtils;
use App::Qtemp::SubsTable;
use App::Qtemp::Template;
use App::Qtemp::Library;

# Fetch some basic program information
my $prog_incantation  = $0;
my $prog_dir          = dirname($0);
my $prog_name         = basename($0);

########################################################################
# GLOBAL VARIABLES
########################################################################

my $exitcode = 0;   # Program exitcode.
my %opt = %ARGV;    # Command line options/arguments.


########################################################################
# CONSTANTS
########################################################################


# A temporary fix until I figure out MakeMaker (DON'T USE "~")
my $PREFIX             = '/home/bryan';
my $BIN_DIR            = $PREFIX.'/bin';
my $SUPPORT_DIR        = $PREFIX.'/share/qtemp';
# Standard directory for templates accessible to all users.
my $template_dir       = $SUPPORT_DIR.'/templates';
my $subs_dir           = $SUPPORT_DIR.'/subs';

# Root directory for user specific template and subs files.
my $user_qtemp_dir     = '~/.qtemp';
my $user_templates     = "$user_qtemp_dir/templates";
my $user_subs          = "$user_qtemp_dir/subs";

# Lists of locations to look for template/subs files.
my @template_search_locations  = ($user_templates, $template_dir);
my @subs_search_locations = ($user_subs, $subs_dir);

########################################################################
# MAIN FUNCTION
########################################################################


# Subroutine: main()
# Type: INTERFACE SUB
# Purpose:
#   This subroutine represents the main control thread of the program.
#   Aside from setup of global variables, actual com
# Returns: 
#   Does not return. Exit is called after all other commands.
sub main {
    # Initialize the template/subs libraries.
    initialize_library();

    # Find the template.
    my $template = open_template($opt_template_name);
  
    $template->write_subbed(
        subs => subs_library(), 
        ($opt_output eq '-' ? () : (file => $opt_output)),
        ($opt{'-n'} ? (trim => 1) : (trim => 0)));

    exit($exitcode);
}

########################################################################
# SUPPORTING SUBROUTINES
########################################################################

### INTERNAL UTILITY
# Subroutine: initialize_library
# Usage: initialize_library( )
# Purpose: Initialize the template library.
# Returns: Nothing
# Throws: Nothing
sub initialize_library {
    initialize_template_library();
    initialize_subs_library();
    return;
}

### INTERNAL UTILITY
# Subroutine: initialize_template_library
# Usage: initialize_template_library( )
# Purpose: 
#   Add templates specified via the command line, and templates in
#   default search locations to the template library.
# Returns: Nothing
# Throws: Nothing
sub initialize_template_library {
    for my $f (@{ $opt{'--template-file'} }) { add_template_file($f); }
    for my $d (@{ $opt{'--template-dir'} }) { add_template_file($d); }
    for my $d (@template_search_locations) { add_template_dir($d); }
    return;
}

### INTERNAL UTILITY
# Subroutine: initialize_subs_library
# Usage: initialize_subs_library( )
# Purpose: 
#   Add default substitutions, command line specified substitutions, and 
#   subs files in default search locations to the subs_library.
# Returns: Nothing
# Throws: Nothing
sub initialize_subs_library {
    my %def_subs = default_subs($opt{'--date-format'}); # Default subs.
    for my $p (keys %def_subs) { add_subs($p, $def_subs{$p}); }

    my @opt_subs = @{ $opt{'--define'} };
    for my $s ( @opt_subs ) { add_subs(map {$s->{$_}} qw{patt replace}) }

    for my $d (@{ $opt{'--subs-file'} }) { add_subs($d) }
    for my $d (@{ $opt{'--subs-dir'} }) { add_subs($d) }

    # .subs files in standard locations.
    for my $d (@subs_search_locations) { add_subs($d); }
    return;
}

# Subroutine: default_subs(), default_subs($date_format)
# Type: INTERNAL UTILITY
# Purpose: 
#   Create a hash of default substitutions.
#   If date format is supplied, it will be passed to strftime instead of
#   the default format.
# Returns: Hash
sub default_subs {
    my $date_format = shift || '%D %T';

    # Substitutions which are always defined.
    my %sub_default_constants = (
        'DATE' => strftime($date_format, localtime()), # Current Date
    );

    # Copy to a hash containing entries which are not always defined.
    my %sub_defaults = %sub_default_constants;

    return %sub_defaults;
}

# Finally, kickstart the script
main();

__END__

=head1 NAME

qtemp - quick template generator

=head1 VERSION

This documentation refers to qtemp version 00.01_03
Originally created on 02/06/10 23:44:17

=head1 USAGE

qtemp [options] <template_name>

=head1 REQUIRED ARGUMENTS

=over

=item <template_name>

Name of template to use (i.e. 'perl' uses template 'perl.qtemp').

=back

=head1 OPTIONS

=over


=item -o <output_file> | --output [=] <output_file>

Name of file to print template to (default: '-').
Defines substitution $FILE mapping to <output_file> if not equal to '-'.

=for Euclid:
    output_file.type: writable
    output_file.default: '-'

=item -n

Trim any trailing newlines from the end of the template.
This is useful for piping a template into a program like 
xclip (or pbcopy), inline in vim, ...

=item -d <date-format> | --date-format [=] <date-format>

Specify the date format to use in the special $D date substitution.

=for Euclid:
    date-format.default: '%D %T'

=item -t <templ_file> | --template-file [=] <templ_file>

Specify an extra template file to add to the library 
(not necessarily the template output). 
This is not really recommended in most circumstances.

=for Euclid:
    repeatable
    templ_file.type:  readable

=item -T <templ_dir> | --template-dir [=] <templ_dir>

Specify a directory in which to search for template files.

=for Euclid:
    repeatable
    templ_dir.type:  readable, -d templ_dir

=item -s <sub_file> | --subs-file [=] <sub_file>

Specify a file with custom substitutions to use.

=for Euclid:
    repeatable
    sub_file.type:  readable

=item -S <sub_dir> | --subs-dir [=] <sub_dir>

Specify a directory in which to search for substitutions.

=for Euclid:
    repeatable
    sub_dir.type:  readable, -d sub_dir

=item -d <patt>=<replace> | --define <patt>=<replace>

Define a substitution to use in the template.

=for Euclid:
    repeatable
    patt.type: /\w+/
    replace.default: ""

=item --version

=item --usage

=item --help

=item --man

Print the usual program information

=back

=head1 DESCRIPTION

qtemp is a template managing program. It is currently used generally to
quickly create new scripts (perl, python, ...) and tex files. 
It can also be used in conjunction with vim to insert templates for new 
functions/subroutines into a file being editted.

qtemp prints templates either to STDOUT or to a file.

Templates can have substitution patterns in them, which allow custom 
information (e.g. filename, creation date, ...) to be inserted into the 
template at the time of generation.

When templates are written to a file, the template can also specify
commands to execute after writing. This could include running chmod on
script files, or perhaps adding and making an initial commit in a version
control system.

=head1 TEMPLATES

Templates can be added to qtemp by placing them in any (possibly nested)
subdirectory of a searched template directory.

Templates can contain three sections, 
seperated by a line containing only '!!\n'.
These sections are:
=over
=item Local substitution definitions.
=item Template content containing substitutions.
=item Shell script code to execute after writing to a file.
=back

When all three sections are given, they must be given in the above order.
If two sections are given, CURRENTLY, the first is assumed to be a template,
and the second a shell script.
If only one section is given, it is assumed to be a template.

=head1 SUBSTITUTIONS

Pattern substitutions to be made in templates can be defined in .subs files
and placed in a searched subs directory (~/.qtemp/subs).

Substitutions are defined one-per-line in a .subs file.

A substitution definition consists of string X, the substitution name,
imediately followed by an equal sign '='. 
The remaining characters on the line of a substitution (mod the newline character) 
are used as the substition string for the pattern ${X}, 
or $X if X is not a single word (contains space(s) or symbol(s)).

=head1 SPECIAL SUBSTITUTIONS

There are a number of special substitutions that are defined by default
when qtemp starts execution.

=over

=item $$

This patern expands to a single dollar sign '$'. This is useful when you
actually want a dollar sign in the template.

=item $FILE

When writing the template to a file with the -o option, this pattern
expands to the name of the file being written to.

=item $DATE

This pattern will expand to the date in a short form. 

For example: 02/06/10 23:44:17

=back

=head1 SHELL PIPE SUBSTITUTIONS

qtemp allows templates to pipe shell commands in-line using a pipe substitution.
A pipe substitution has the form '$(<shell command>)'.
The standard output stream of <shell command> will be used as the substitution 
string in this case.

=head1 EXAMPLES

An example template for a perl program follows:

    #!$(which perl)
    # Filename: $FILE
    # Author: ${AUTHOR}
    # Created: $DATE

    our $$VERSION = '00.00_01';

    sub main {

        return 0;
    }

    exit(main());
    !!
    chmod +x $FILE

An example substitution file might look like the following:

    NAME=Bryan Matsuo
    EMAIL=bryan.matsuo@gmail.com
    AUTHOR=${NAME} <${EMAIL}>

Using these two files together produce an executable like this:

    #!/usr/bin/perl

    # Filename: new_perl_script.pl
    # Author: Bryan Matsuo <bryan.matsuo@gmail.com>
    # Created: 02/06/10 23:44:17

    our $VERSION = '00.00_01';

    sub main {

        return 0;
    }

    exit(main());

=head1 AUTHOR

Bryan Matsuo <bryan.matsuo@gmail.com>

=head1 BUGS

=head1 COPYRIGHT & LICENSE

Copyright (C) 2010 by Bryan Matsuo

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.0 or,
at your option, any later version of Perl 5 you may have available.
